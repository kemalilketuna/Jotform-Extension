---
alwaysApply: true
---

# Project Architecture & Tech Stack

## Project Overview
You are developing a cross-browser extension using TypeScript and React that emulates user input through AI agents for site automation.

## Core Technologies
- **WXT Framework**: Use WXT for extension development and build configuration
- **TypeScript**: Strict type checking, use latest ES features
- **React**: For popup UI and content script components (with @wxt-dev/module-react)
- **Tailwind CSS**: Use Tailwind CSS for all styling needs
- **Web Extensions API**: Use the standardized WebExtensions API for maximum compatibility

## Browser Compatibility
- Primary targets: Chrome, Firefox, Safari, Edge
- Use `webextension-polyfill` for API consistency across browsers
- Avoid browser-specific APIs unless absolutely necessary
- Test manifest v3 compatibility (Chrome/Edge) and v2 fallbacks (Firefox/Safari)

## Directory Structure (WXT Framework)
```
src/
├── entrypoints/        # WXT entrypoints (background.ts, content.ts, popup/)
│   ├── background.ts   # Background script entrypoint
│   ├── content.ts      # Content script entrypoint
│   └── popup/          # Popup UI entrypoint
├── components/         # Shared React components
├── utils/              # Utility functions
├── types/              # TypeScript type definitions
├── ai/                 # AI agent logic
├── automation/         # User input emulation
└── assets/             # Static assets
```

## Key Files (WXT Configuration)
- `wxt.config.ts` - WXT framework configuration
- `src/entrypoints/background.ts` - Service worker/background page
- `src/entrypoints/content.ts` - Content script injection
- `src/entrypoints/popup/` - Extension popup interface directory