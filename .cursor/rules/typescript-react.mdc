---
alwaysApply: true
---

# TypeScript & React Development

## TypeScript Best Practices
- **Strict TypeScript**: Use strict TypeScript configuration
- **Interface all APIs**: Define interfaces for all browser extension APIs
- **Type all message passing** between scripts
- **Union types**: Use union types for action types and message schemas
- **Branded types**: Leverage branded types for security-critical data

## Strict TypeScript Requirements
- Use strict TypeScript configuration
- Interface all APIs and external dependencies
- Type all message passing between extension scripts
- Use union types for action types and message schemas
- Leverage branded types for security-critical data

## React Patterns
- **Functional components with hooks**: Use functional components exclusively
- **Proper useEffect cleanup**: Implement proper cleanup in useEffect for content scripts
- **React.memo**: Use React.memo for performance optimization
- **Portal rendering**: Handle portal rendering for content script React components
- **Context for state**: Use context for sharing state between extension parts

## Component Architecture
- **Error boundaries**: Comprehensive error boundaries in React components
- **Graceful degradation**: Handle cases when browser APIs are unavailable
- **User-friendly errors**: Provide clear error messages in the popup
- **State management**: Proper state management across extension components

## React Hook Patterns
- Use functional components with hooks exclusively
- Implement proper cleanup in useEffect for content scripts
- Use React.memo for performance optimization where appropriate
- Handle portal rendering for content script React components

## Extension-Specific React Patterns
- Use context for sharing state between extension parts
- Implement error boundaries for robust error handling
- Handle browser API unavailability gracefully
- Optimize for extension popup constraints

## Type Safety Requirements
- All browser extension APIs must be properly typed
- Message passing between scripts must be strongly typed
- Use branded types for sensitive data like tokens or IDs
- Implement proper error type definitions

## Performance Considerations
- Use React.memo to prevent unnecessary re-renders
- Implement proper useEffect dependencies
- Clean up event listeners and subscriptions
- Optimize for extension popup performance constraints