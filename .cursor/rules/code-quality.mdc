---
alwaysApply: true
---

# Code Quality Standards

## Component Organization
- **React Component Splitting**: If React components become too large, split them into separate files for easier maintenance
- **Main Component Pattern**: Implement the main component in index.tsx
- **Class Splitting**: If classes are too large and long, split them into smaller classes to avoid code smells
- **Single Responsibility**: Each component/class should have one clear responsibility

## Function Management
- **Break down overly long functions** into smaller, single-responsibility functions to improve clarity and maintainability
- **Function Length**: Keep functions focused and concise
- **Clear Naming**: Use descriptive names that indicate function purpose
- **Avoid Deep Nesting**: Minimize nested control structures

## Refactoring Policy
- **Proactive Refactoring**: Always refactor code during development when improvements are identified
- **Never Defer Improvements**: Refactor immediately when needed - don't defer improvements for later
- **Code Clarity**: Prioritize code readability and maintainability over quick implementations
- **Clean Architecture**: Continuously improve code structure rather than leaving technical debt
- **Critical Rule**: Never add new features when refactoring, only refactor the code related to existing features

## Code Documentation
- **Minimal, purposeful comments** explaining 'why' not 'what'
- **Self-Documenting Code**: Let code be self-documenting through clear naming and structure
- **Avoid Obvious Comments**: Don't restate what the code does
- **Focus on Intent**: Explain the reasoning behind complex decisions

## Error Handling
- **Comprehensive error boundaries** in React components
- **Graceful degradation** when browser APIs are unavailable
- **User-friendly error messages** in the popup
- **Privacy-respecting logging** system

## Critical Rules
- **NEVER create .md files or documentation** - focus on implementation over documentation
- **Provide explanations verbally**, let code be self-documenting
- **Implement working, production-ready code** that follows these patterns
- **Maintain security, performance, and cross-browser compatibility**

## Testing Standards
- Unit tests for utility functions and AI logic
- Integration tests for browser extension APIs
- E2E tests for automation workflows
- Cross-browser testing setup